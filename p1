public class Node {

	private String name;
	private Node leftChild;
	private Node rightChild;
	private Node parent;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Node getLeftChild() {
		return leftChild;
	}

	public void setLeftChild(Node leftChild) {
		this.leftChild = leftChild;
	}

	public Node getRightChild() {
		return rightChild;
	}

	public void setRightChild(Node rightChild) {
		this.rightChild = rightChild;
	}

	public Node getParent() {
		return parent;
	}

	public void setParent(Node parent) {
		this.parent = parent;
	}

	public void displayNode() // display ourselves
	{
		System.out.println(name);
	}

}

import java.util.Stack;

public class Tree {

	private Node root;

	public Tree() {
		root = null;
	}

	public void insertRoot(String rootName) {
		if (root == null) {
			Node newNode = new Node();
			newNode.setName(rootName);
			root = newNode;
		} else {
			System.out.println("There is already a root");
		}
	}

	public String insertLeftChild(String parentName, String childName) {
		String work = "";

		Node parent = parent(parentName, root);

		if (parent == null) {
			work = "No such parent exists";
		} else if (parent.getLeftChild() == null) {
			Node newNode = new Node();
			newNode.setName(childName);

			newNode.setParent(parent);
			parent.setLeftChild(newNode);

			work = "It entered correctly";
		} else if (parent.getLeftChild() != null) {
			work = "They already have a left child";
		}
		return work;
	}

	public String insertRightChild(String parentName, String childName) {
		String work = "";

		Node parent = parent(parentName, root);

		if (parent == null) {
			work = "No such parent exists";
		} else if (parent.getRightChild() == null) {
			Node newNode = new Node();
			newNode.setName(childName);

			newNode.setParent(parent);
			parent.setRightChild(newNode);

			work = "It entered correctly";
		} else if (parent.getRightChild() != null) {
			work = "They already have a right child";
		}
		return work;
	}

	public String getDescendants(String name) { // traverse
		Node parent = parent(name, root);

		String descendant = "";

		if (parent == null) {
			descendant = "No such parent exists";
		} else if (parent != null) {
			descendant = Descendents(parent, descendant);
		}

		if (descendant.equals(name + " ")) {
			descendant = "Has no descendants";
		}

		return descendant;
	}

	public String getAncestors(String name) {
		Node parent = parent(name, root);

		String ancestor = "";

		if (parent == null) {
			ancestor = "No such parent exists";
		} else {
			ancestor = Ancestory(parent, ancestor);
		}

		if (ancestor.equals("")) {
			ancestor = "Parent has no ancestors";
		}

		return ancestor;
	}

	public String newTree() {
		root = null;

		return "The tree is now empty";
	}

	public Node parent(String parentName, Node root) {
		if (root != null) {
			if (root.getName().equals(parentName)) {
				return root;
			} else {
				Node found = parent(parentName, root.getLeftChild());
				if (found == null) {
					found = parent(parentName, root.getRightChild());
				}
				return found;
			}
		} else {
			return null;
		}
	}

	public String Descendents(Node root, String name) {
		if (root != null) {

			name = name + root.getName() + " "; // parent
			name = Descendents(root.getLeftChild(), name); // left child
			name = Descendents(root.getRightChild(), name);

		}
		return name;

	}

	private String Ancestory(Node parent, String ancestor) {
		if (parent.getParent() != null) {
			ancestor = ancestor + parent.getParent().getName() + " ";
			Ancestory(parent.getParent(), ancestor);
			return ancestor;
		} else {
			return ancestor;
		}
	}

	public String displayTree() {
		String tree = "";

		Stack<Node> globalStack = new Stack<Node>();
		globalStack.push(root);
		int nBlanks = 32;
		boolean isRowEmpty = false;
		tree = "-------------------------------------------------------------\n";
		while (isRowEmpty == false) {
			Stack<Node> localStack = new Stack<Node>();
			isRowEmpty = true;

			for (int j = 0; j < nBlanks; j++) {
				tree = tree + " ";
			}

			while (globalStack.isEmpty() == false) {
				Node temp = globalStack.pop();
				if (temp != null) {
					tree = tree + temp.getName();
					localStack.push(temp.getLeftChild());
					localStack.push(temp.getRightChild());

					if (temp.getLeftChild() != null || temp.getRightChild() != null) {
						isRowEmpty = false;
					}
				} else {
					tree = tree + "--";
					localStack.push(null);
					localStack.push(null);
				}

				for (int j = 0; j < nBlanks * 2 - 2; j++) {
					tree = tree + "  ";
				}
			} // end while globalStack not empty
			tree = tree + "\n";
			nBlanks /= 2;
			while (localStack.isEmpty() == false) {
				globalStack.push(localStack.pop());
			}
		} // end while isRowEmpty is false
		tree = tree + "-------------------------------------------------------------\n";

		return tree;
	}

}

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class Demo extends Application {

	public static void main(String[] args) {
		Application.launch(args);

	}

	@Override
	public void start(Stage primaryStage) throws Exception {

		BorderPane show = new BorderPane();
		TextField tf = new TextField();
		Button b = new Button("Enter Text");
		HBox h = new HBox();
		h.getChildren().addAll(tf, b);
		h.setAlignment(Pos.CENTER);

		TextArea ta = new TextArea();

		show.setTop(h);
		show.setCenter(ta);

		Scene scene = new Scene(show, 600, 400);
		primaryStage.setScene(scene);
		primaryStage.show();

		Tree t = new Tree();

		ta.setText(
				"Enter first letter of insert root, left insert, right insert, ancestors, descendants, new tree, show \n");

		b.setOnAction(e -> {
			char letter = tf.getText().charAt(0);
			tf.setText("");

			switch (letter) {
			case 'i':
				ta.setText(ta.getText() + "Enter the root name:\n");

				BorderPane show1 = new BorderPane();
				TextField tf1 = new TextField();
				Button b1 = new Button("Enter Text");
				HBox h1 = new HBox();
				h1.getChildren().addAll(tf1, b1);
				h1.setAlignment(Pos.CENTER);

				show1.setCenter(h1);

				Scene scene1 = new Scene(show1);
				Stage stage1 = new Stage();
				stage1.setScene(scene1);
				stage1.show();

				b1.setOnAction(i -> {
					if (tf1.getText().equals("")) {
						ta.setText(ta.getText() + "Please enter text in new area \n");
					} else {
						t.insertRoot(tf1.getText());
						stage1.close();
						ta.setText(ta.getText()
								+ "Enter first letter of insert root, left insert, right insert, ancestors, descendants, new tree, show \n");
					}
				});
				break;

			case 'l':
				ta.setText(ta.getText() + "Enter the parent name and the child name:\n");

				BorderPane show2 = new BorderPane();
				TextField tf2 = new TextField();
				TextField tf3 = new TextField();
				Button b2 = new Button("Enter Text");
				HBox h2 = new HBox();
				h2.getChildren().addAll(tf2, tf3, b2);
				h2.setAlignment(Pos.CENTER);

				show2.setCenter(h2);

				Scene scene2 = new Scene(show2);
				Stage stage2 = new Stage();
				stage2.setScene(scene2);
				stage2.show();

				b2.setOnAction(i -> {
					if (tf2.getText().equals("") || tf3.getText().equals("")) {
						ta.setText(ta.getText() + "Please enter text in both of the new area \n");
					} else {
						ta.setText(ta.getText() + t.insertLeftChild(tf2.getText(), tf3.getText()) + "\n");
						stage2.close();
						ta.setText(ta.getText()
								+ "Enter first letter of insert root, left insert, right insert, ancestors, descendants, new tree, show \n");
					}
				});

				break;
			case 'r':
				ta.setText(ta.getText() + "Enter the parent name and the child name:\n");

				BorderPane show3 = new BorderPane();
				TextField tf4 = new TextField();
				TextField tf5 = new TextField();
				Button b3 = new Button("Enter Text");
				HBox h3 = new HBox();
				h3.getChildren().addAll(tf4, tf5, b3);
				h3.setAlignment(Pos.CENTER);

				show3.setCenter(h3);

				Scene scene3 = new Scene(show3);
				Stage stage3 = new Stage();
				stage3.setScene(scene3);
				stage3.show();

				b3.setOnAction(i -> {
					if (tf4.getText().equals("") || tf5.getText().equals("")) {
						ta.setText(ta.getText() + "Please enter text in both of the new area \n");
					} else {
						ta.setText(ta.getText() + t.insertRightChild(tf4.getText(), tf5.getText()) + "\n");
						stage3.close();
						ta.setText(ta.getText()
								+ "Enter first letter of insert root, left insert, right insert, ancestors, descendants, new tree, show \n");
					}

				});

				break;
			case 'a':
				ta.setText(ta.getText() + "Enter who you want the ancestors of\n");

				BorderPane show4 = new BorderPane();
				TextField tf6 = new TextField();
				Button b4 = new Button("Enter Text");
				HBox h4 = new HBox();
				h4.getChildren().addAll(tf6, b4);
				h4.setAlignment(Pos.CENTER);

				show4.setCenter(h4);

				Scene scene4 = new Scene(show4);
				Stage stage4 = new Stage();
				stage4.setScene(scene4);
				stage4.show();

				b4.setOnAction(i -> {
					if (tf6.getText().equals("")) {
						ta.setText(ta.getText() + "Please enter text innew area \n");
					} else {
						ta.setText(ta.getText() + t.getAncestors(tf6.getText()) + "\n");
						stage4.close();
						ta.setText(ta.getText()
								+ "Enter first letter of insert root, left insert, right insert, ancestors, descendants, new tree, show \n");
					}
				});

				break;
			case 'd':
				ta.setText(ta.getText() + "Enter the name of the node you want the descendant of:\n");

				BorderPane show5 = new BorderPane();
				TextField tf7 = new TextField();
				Button b5 = new Button("Enter Text");
				HBox h5 = new HBox();
				h5.getChildren().addAll(tf7, b5);
				h5.setAlignment(Pos.CENTER);

				show5.setCenter(h5);

				Scene scene5 = new Scene(show5);
				Stage stage5 = new Stage();
				stage5.setScene(scene5);
				stage5.show();

				b5.setOnAction(i -> {
					if (tf7.getText().equals("")) {
						ta.setText(ta.getText() + "Please enter text innew area \n");
					} else {
						ta.setText(ta.getText() + t.getDescendants(tf7.getText()) + "\n");
						stage5.close();
						ta.setText(ta.getText()
								+ "Enter first letter of insert root, left insert, right insert, ancestors, descendants, new tree, show \n");

					}
				});

				break;
			case 'n':
				ta.setText(ta.getText() + t.newTree() + "\n");
				ta.setText(ta.getText()
						+ "Enter first letter of insert root, left insert, right insert, ancestors, descendants, new tree, show \n");
				break;
			case 's':
				TextArea ta1 = new TextArea();
				
				ta1.setText(t.displayTree());
				
				HBox display = new HBox();
				display.getChildren().add(ta1);
				
				Scene scene6 = new Scene(display, 400, 400);
				Stage stage6 = new Stage();
				stage6.setScene(scene6);
				stage6.show();
				break;
				
			default:
				ta.setText(ta.getText() + "Invalid entry.\n");
				break;
			}
		});
	}
}
